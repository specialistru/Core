/*
 * File:        network_module.h
 * Description: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –º–æ–¥—É–ª—è.
 * Author:      Ivan Petrov <ivan.petrov@example.com>
 * Created:     2025-08-04 10:12
 * Version:     1.3.0
 * License:     MIT License
 *
 * Changelog:
 * ------------------------------------------------------------------------------
 * Date                Author                        Version     Description
 * ------------------- ----------------------------- ----------- ----------------
 * 2025-08-04 14:45    Ivan Petrov <ivan.petrov@...> 1.3.0       –°–¥–µ–ª–∞–Ω–∞ opaque-
 *                                                              —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∞
 *                                                              –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ—Å—Ç—å –∏
 *                                                              net_status_str().
 * 2025-08-04 10:12    Ivan Petrov <ivan.petrov@...> 1.2.0       –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è,
 *                                                              –∞–≤—Ç–æ—Ä –∏ –∏—Å—Ç–æ—Ä–∏—è.
 * 2025-07-28 15:30    Ivan Petrov <ivan.petrov@...> 1.1.0       –î–æ–±–∞–≤–ª–µ–Ω—ã net_send
 *                                                              –∏ net_close.
 * 2025-07-20 09:45    Ivan Petrov <ivan.petrov@...> 1.0.0       –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
 *                                                              net_connect –∏ init.
 * ------------------------------------------------------------------------------
 */

#ifndef NETWORK_MODULE_H
#define NETWORK_MODULE_H

#include <stddef.h>   // size_t
#include <stdint.h>   // uint32_t

#ifdef __cplusplus
extern "C" {
#endif

// –í–µ—Ä—Å–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏)
#define NETWORK_MODULE_VERSION       "1.3.0"
#define NETWORK_MODULE_VERSION_MAJOR 1
#define NETWORK_MODULE_VERSION_MINOR 3
#define NETWORK_MODULE_VERSION_PATCH 0

/*
 * –ö–æ–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–µ—Ç–µ–≤–æ–≥–æ –º–æ–¥—É–ª—è.
 *
 * +-------------------+----------+------------------------------------+-------------------------+
 * | –ò–º—è               | –ó–Ω–∞—á–µ–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ                           | –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ  |
 * +-------------------+----------+------------------------------------+-------------------------+
 * | NET_OK            | 0        | –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ                | –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É        |
 * | NET_ERROR         | -1       | –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –æ—à–∏–±–∫–∞             | –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é       |
 * | NET_TIMEOUT       | -2       | –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è          | –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é       |
 * | NET_INVALID_ARG   | -3       | –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç             | –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å|
 * | NET_NOT_CONNECTED | -4       | –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ         | –°–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é    |
 * +-------------------+----------+------------------------------------+-------------------------+
 */
typedef enum {
    NET_OK = 0,
    NET_ERROR = -1,
    NET_TIMEOUT = -2,
    NET_INVALID_ARG = -3,
    NET_NOT_CONNECTED = -4
} NetStatus;

/*
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ NetStatus.
 *
 * status - –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
 * 
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç—É—Å—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "NET_TIMEOUT").
 * –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç NULL.
 */
const char* net_status_str(NetStatus status);

/// –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∑–ª–∞ B+-–¥–µ—Ä–µ–≤–∞
typedef struct btree_node_t
{
    int keys[BTREE_ORDER];         // –ö–ª—é—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, int)
    void *values[BTREE_ORDER + 1]; // –£–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–ª—è –ª–∏—Å—Ç—å–µ–≤) –∏–ª–∏ –Ω–∞ –ø–æ—Ç–æ–º–∫–æ–≤ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö)
    int key_count;                 // –ö–æ–ª-–≤–æ –∫–ª—é—á–µ–π
    bool is_leaf;                  // true, –µ—Å–ª–∏ —É–∑–µ–ª ‚Äî –ª–∏—Å—Ç
} btree_node_t;

#### üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (`init`)

| –§—É–Ω–∫—Ü–∏—è               | –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ            |
| --------------------- | --------------------- |
| `init_system_startup` | –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã |
| `init_config_load`    | –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ |
| `init_logger_setup`   | –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è |

---


/*
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (NetConnection).
 *
 * +----------------+--------------+----------------------------------------------+-------------------------+----------------+
 * | –ü–æ–ª–µ           | –¢–∏–ø          | –û–ø–∏—Å–∞–Ω–∏–µ                                     | –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è             | –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é    |
 * +----------------+--------------+----------------------------------------------+-------------------------+----------------+
 * | socket_fd      | int          | –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞                            | >= 0 –∏–ª–∏ -1 (–Ω–µ—Ç —Å–æ–∫–µ—Ç–∞)| -1             |
 * | timeout_ms     | uint32_t     | –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö             | 0..30000                | 5000           |
 * | is_connected   | int (bool)   | –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è                     | 0 = –Ω–µ—Ç, 1 = –¥–∞         | 0              |
 * +----------------+--------------+----------------------------------------------+-------------------------+----------------+
 *
 * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
 * –≠—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞ (opaque) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
 */
typedef struct NetConnection NetConnection;

/*
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –º–æ–¥—É–ª—è.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç NET_OK –∏–ª–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏.
 */
NetStatus net_init(void);

/*
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤.
 */
void net_shutdown(void);

/*
 * –°–æ–∑–¥–∞—ë—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç NetConnection.
 *
 * timeout_ms - –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ (–≤ –º—Å)
 *
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ NetConnection –∏–ª–∏ NULL –ø—Ä–∏ –æ—à–∏–±–∫–µ.
 */
NetConnection* net_connection_create(uint32_t timeout_ms);

/*
 * –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç NetConnection.
 *
 * conn - —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å NULL)
 */
void net_connection_destroy(NetConnection* conn);

/*
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.
 *
 * conn     - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 * address  - IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –∏–º—è —Ö–æ—Å—Ç–∞
 * port     - –ø–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 *
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ NetStatus.
 */
NetStatus net_connect(NetConnection* conn, const char* address, int port);

/*
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é.
 *
 * conn - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 * data - –±—É—Ñ–µ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏
 * len  - –¥–ª–∏–Ω–∞ –±—É—Ñ–µ—Ä–∞
 *
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ NetStatus.
 */
NetStatus net_send(NetConnection* conn, const void* data, size_t len);

/*
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å).
 *
 * conn - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 */
void net_close(NetConnection* conn);

/*
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç (–≤ –º—Å) –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π.
 *
 * conn        - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 * timeout_ms  - –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞
 *
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç NET_OK –∏–ª–∏ NET_INVALID_ARG.
 */
NetStatus net_set_timeout(NetConnection* conn, uint32_t timeout_ms);

/*
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–∞—É—Ç (–≤ –º—Å).
 *
 * conn - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 *
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞.
 * –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.
 */
uint32_t net_get_timeout(const NetConnection* conn);

#ifdef __cplusplus
}
#endif

#endif // NETWORK_MODULE_H

