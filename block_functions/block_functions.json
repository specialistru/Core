{
  "id": "20.4",
  "internal_id": "core_storage_row_column_json_indexes",
  "title": "–Ø–¥—Ä–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: row-store, column-store, JSON-store –∏ –∏–Ω–¥–µ–∫—Å—ã",
  "package": "20. –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —è–¥—Ä–æ",
  "description": "...",
  "functions": [
    {
      "name": "storage_row_insert",
      "prototype": "bool storage_row_insert(table_t *table, const row_t *row);",
      "description": "–í—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ row-store.",
      "returns": "true"
    },
    ...
  ],
  "structures": [...],
  "metrics": [...],
  "security": [...],
  "dependencies": [...],
  "tests": [...]
}


import zipfile

# –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ Markdown-—Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ 374 –±–ª–æ–∫–æ–≤
markdown_dir = Path("/mnt/data/markdown_blocks")
markdown_dir.mkdir(parents=True, exist_ok=True)

for block in full_json_blocks:
    md_path = markdown_dir / f"block_{block['id'].replace('.', '_')}.md"
    with md_path.open("w", encoding="utf-8") as f:
        f.write(f"# üß© –ë–ª–æ–∫ {block['id']} ‚Äî {block['title']}\n\n")
        f.write(f"**–ü–∞–∫–µ—Ç:** `{block['package']}`  \n")
        f.write(f"**Block ID:** `{block['internal_id']}`\n\n")
        f.write(f"### üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ\n{block['description']}\n\n")

        f.write("### üîß –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n")
        for func in block["functions"]:
            f.write(f"- `{func['prototype']}` ‚Äî {func['description']} ‚Üí **{func['returns']}**\n")
        f.write("\n")

        f.write("### üìà –ú–µ—Ç—Ä–∏–∫–∏ –∏ Observability\n")
        if block["metrics"]:
            for metric in block["metrics"]:
                f.write(f"- `{metric}`\n")
        else:
            f.write("_–Ω–µ—Ç_\n")
        f.write("\n")

        f.write("### üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n")
        if block["security"]:
            for s in block["security"]:
                f.write(f"- {s}\n")
        else:
            f.write("_–Ω–µ—Ç_\n")
        f.write("\n")

        f.write("### ‚öôÔ∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏\n")
        if block["dependencies"]:
            for dep in block["dependencies"]:
                f.write(f"- {dep}\n")
        else:
            f.write("_–Ω–µ—Ç_\n")
        f.write("\n")

        f.write("### üß™ –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤\n")
        if block["tests"]:
            for test in block["tests"]:
                f.write(f"- `{test}`\n")
        else:
            f.write("_–Ω–µ—Ç_\n")

# –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ zip
zip_path = Path("/mnt/data/block_functions_markdown.zip")
with zipfile.ZipFile(zip_path, 'w') as zipf:
    for md_file in markdown_dir.glob("*.md"):
        zipf.write(md_file, arcname=md_file.name)

zip_path.name
////////////////

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö 374 –±–ª–æ–∫–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON. –ó–¥–µ—Å—å —Å–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 374 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞.

# –°–æ–∑–¥–∞—ë–º 374 –±–ª–æ–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ id –∏ internal_id (–Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–Ω—ã–µ, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
full_json_blocks = []

for i in range(1, 375):
    pkg_num = (i - 1) // 10  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞–∫–µ—Ç–∞–º
    block_id = f"{pkg_num}.{(i - 1) % 10 + 1}"
    internal_id = f"block_internal_{block_id.replace('.', '_')}"
    
    block = {
        "id": block_id,
        "internal_id": internal_id,
        "title": f"–ë–ª–æ–∫ {block_id}",
        "package": f"{pkg_num}. –ü–∞–∫–µ—Ç {pkg_num}",
        "description": f"–û–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –±–ª–æ–∫–∞ {block_id}.",
        "functions": [
            {
                "name": f"function_{i}_a",
                "prototype": f"void function_{i}_a(void);",
                "description": f"–§—É–Ω–∫—Ü–∏—è A –±–ª–æ–∫–∞ {block_id}.",
                "returns": "void"
            },
            {
                "name": f"function_{i}_b",
                "prototype": f"int function_{i}_b(int x);",
                "description": f"–§—É–Ω–∫—Ü–∏—è B –±–ª–æ–∫–∞ {block_id}.",
                "returns": "int"
            }
        ],
        "structures": [],
        "metrics": [],
        "security": [],
        "dependencies": [],
        "tests": []
    }
    full_json_blocks.append(block)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –±–ª–æ–∫–æ–≤
full_output_path = Path("/mnt/data/block_functions_full_374.json")
with full_output_path.open("w", encoding="utf-8") as f:
    json.dump(full_json_blocks, f, indent=2, ensure_ascii=False)

full_output_path.name
